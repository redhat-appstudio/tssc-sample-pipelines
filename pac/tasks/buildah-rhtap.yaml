apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: "docker"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "containers, rhtap"
  name: buildah-rhtap
spec:
  description: |-
    Buildah task builds source code into a container image and pushes the image into container registry using buildah tool.
    In addition it generates a SBOM file, injects the SBOM file into final container image and pushes the SBOM file as separate image using cosign tool.
  params:
  - description: Reference of the image buildah will produce.
    name: IMAGE
    type: string
  - default: ./Dockerfile
    description: Path to the Dockerfile to build.
    name: DOCKERFILE
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    name: TLSVERIFY
    type: string
  - name: BUILD_ARGS_FILE
    description: Path to a file with build arguments, see https://www.mankier.com/1/buildah-build#--build-arg-file
    type: string
    default: ""
  - name: STORAGE_DRIVER
    description: Storage driver to configure for buildah
    type: string
    default: vfs
  results:
  - description: Digest of the image just built
    name: IMAGE_DIGEST
  - description: Image repository and tag where the built image was pushed
    name: IMAGE_URL
  - description: Digests of the base images used for build
    name: BASE_IMAGES_DIGESTS
  - description: Link to the SBOM layer pushed to the registry as part of an OCI artifact.
    name: SBOM_BLOB_URL
  stepTemplate:
    env:
    - name: HOMEDIR
      value: /home/tekton
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: CONTEXT
      value: $(params.CONTEXT)
    - name: DOCKERFILE
      value: $(params.DOCKERFILE)
    - name: IMAGE
      value: $(params.IMAGE)
    - name: IMAGE_URL
      value: $(params.IMAGE)
    - name: TLSVERIFY
      value: $(params.TLSVERIFY)
    - name: BUILD_ARGS_FILE
      value: $(params.BUILD_ARGS_FILE)
    - name: CUSTOM_ROOT_CA
      value: /tekton-custom-certs/ca-bundle.crt
    # TODO: These are requried by the init script but are not actually used by the buildah-rhtap.sh script
    - name: COSIGN_SECRET_PASSWORD
      value: ignore
    - name: COSIGN_SECRET_KEY
      value: ignore
    - name: COSIGN_PUBLIC_KEY
      value: ignore
    - name: DISABLE_ACS
      value: ignore
    - name: ROX_CENTRAL_ENDPOINT
      value: ignore
    - name: ROX_API_TOKEN
      value: ignore
    - name: GITOPS_AUTH_PASSWORD
      value: ignore
    - name: POLICY_CONFIGURATION
      value: ignore
    - name: REKOR_HOST
      value: ignore
    - name: IGNORE_REKOR
      value: ignore
    - name: INFO
      value: ignore
    - name: STRICT
      value: ignore
    - name: EFFECTIVE_TIME
      value: ignore
    workingDir: "$(workspaces.source.path)/source"
  steps:
  - name: build
    image: quay.io/redhat-appstudio/rhtap-task-runner:latest
    script: |
      # Workaround to make the init script work
      mkdir -p rhtap
      touch rhtap/env.sh

      /work/rhtap/init.sh

      # TODO: In Tekton, the OCI registry authentication is automatically made available via the
      # secrets linked to the ServiceAccount. We should use that if the expected env variables are
      # not set. This is a workarond in lieu of that.
      get_container_auth() {
        # https://man.archlinux.org/man/containers-auth.json.5

        local image=$1

        local runtime_dir="${XDG_RUNTIME_DIR:-}"
        local config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
        if [[ -n "$runtime_dir" ]]; then
            default_authfile="${runtime_dir}/containers/auth.json"
        else
            default_authfile="$config_home/containers/auth.json"
        fi

        local maybe_auth_files=(
            "$default_authfile"
            "$config_home/containers/auth.json"
            "$HOME/.docker/config.json"
            "$HOME/.dockercfg"
        )
        local auth_files=()
        for file in "${maybe_auth_files[@]}"; do
            if [[ -r "$file" ]]; then
                auth_files+=("$file")
            fi
        done

        # registry.com/namespace/repo@sha256:digest -> registry.com/namespace/repo
        local auth_key=${image%@*}

        while true; do
            for auth_file in "${auth_files[@]}"; do
                if jq -r -e --arg key "$auth_key" '.auths[$key].auth // empty' "$auth_file"; then
                    echo "Found auth for $auth_key in $auth_file" >&2
                    return 0
                fi
            done

            # Try less specific key, e.g. registry.com/namespace/repo -> registry.com/namespace
            local new_key=${auth_key%/*}
            if [[ "$new_key" = "$auth_key" ]]; then
                # Already tried all possible keys, no auth found
                echo "No auth found for $auth_key" >&2
                return 1
            fi

            auth_key=$new_key
        done

      }

      creds="$(get_container_auth quay.io/lucarval/yolo:foobar | base64 -d)"
      export IMAGE_REGISTRY_USER="$(echo -n "${creds}" | cut -d: -f1)"
      export IMAGE_REGISTRY_PASSWORD="$(echo -n "${creds}" | cut -d: -f2-)"

      echo "pwd:"
      pwd

      echo "ls -la:"
      ls -la .

      /work/rhtap/buildah-rhtap.sh

      ls -la ./results/buildah-rhtap
      cat ./results/buildah-rhtap/*

    securityContext:
      capabilities:
        add:
          # this is needed so that buildah can write to the mounted /var/lib/containers directory
          - SETFCAP
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /tmp/files
      name: tmpfiles

  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - emptyDir: {}
    name: tmpfiles
  workspaces:
  - name: source
    description: Workspace containing the source code to build.
